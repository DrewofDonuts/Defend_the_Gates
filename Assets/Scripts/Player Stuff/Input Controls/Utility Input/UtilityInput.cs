//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Player Stuff/Input Controls/Utility Input/UtilityInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UtilityInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UtilityInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UtilityInput"",
    ""maps"": [
        {
            ""name"": ""Utility"",
            ""id"": ""b851b37e-b991-4708-ad27-22a994646961"",
            ""actions"": [
                {
                    ""name"": ""ScreenCapture"",
                    ""type"": ""Button"",
                    ""id"": ""2cb5fe37-ba1a-4e2c-83ef-ca27e2dd9b5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d173fd3f-1cc7-4b99-acf4-aec75d4e9d50"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenCapture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Utility
        m_Utility = asset.FindActionMap("Utility", throwIfNotFound: true);
        m_Utility_ScreenCapture = m_Utility.FindAction("ScreenCapture", throwIfNotFound: true);
    }

    ~@UtilityInput()
    {
        UnityEngine.Debug.Assert(!m_Utility.enabled, "This will cause a leak and performance issues, UtilityInput.Utility.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Utility
    private readonly InputActionMap m_Utility;
    private List<IUtilityActions> m_UtilityActionsCallbackInterfaces = new List<IUtilityActions>();
    private readonly InputAction m_Utility_ScreenCapture;
    public struct UtilityActions
    {
        private @UtilityInput m_Wrapper;
        public UtilityActions(@UtilityInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenCapture => m_Wrapper.m_Utility_ScreenCapture;
        public InputActionMap Get() { return m_Wrapper.m_Utility; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UtilityActions set) { return set.Get(); }
        public void AddCallbacks(IUtilityActions instance)
        {
            if (instance == null || m_Wrapper.m_UtilityActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UtilityActionsCallbackInterfaces.Add(instance);
            @ScreenCapture.started += instance.OnScreenCapture;
            @ScreenCapture.performed += instance.OnScreenCapture;
            @ScreenCapture.canceled += instance.OnScreenCapture;
        }

        private void UnregisterCallbacks(IUtilityActions instance)
        {
            @ScreenCapture.started -= instance.OnScreenCapture;
            @ScreenCapture.performed -= instance.OnScreenCapture;
            @ScreenCapture.canceled -= instance.OnScreenCapture;
        }

        public void RemoveCallbacks(IUtilityActions instance)
        {
            if (m_Wrapper.m_UtilityActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUtilityActions instance)
        {
            foreach (var item in m_Wrapper.m_UtilityActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UtilityActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UtilityActions @Utility => new UtilityActions(this);
    public interface IUtilityActions
    {
        void OnScreenCapture(InputAction.CallbackContext context);
    }
}
